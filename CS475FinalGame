import pygame, sys
from random import *

pygame.init()

FPS = 120
clock = pygame.time.Clock()

BLACK = (0, 0, 0)
GOLD = (255, 204, 0)
BLUE = (0, 89, 122)
WHITE = (255, 255, 255)
RED = (225, 0, 0)

global gridlength
gridlength = 5

#Dimensions for all the squares used for both Tile and Square
GRIDWID = 35
GRIDHEI = 35

#480x320 for the 3.5" screen
xdim = 480
ydim = 320

offset = 18

#Global for determining if we're dragging something
global held
held = False

global completion
completion = False

global area
area = 1

global level
level = 1

DISPLAYSURF = pygame.display.set_mode((xdim, ydim))

font = pygame.font.SysFont("Ariel", 20)

#Class for the road tiles
class Tile(pygame.sprite.Sprite):
    def __init__(self, xcord, ycord):
        super().__init__()
        self.visited = False

        #Tile type will be determined by a 4-bit binary value
        
        #Straights:
        #N-S - '1010' = 10
        #W-E - '0101' = 5
        
        #Curves
        #N-E - '1100' = 12
        #E-S - '0110' = 6
        #S-W - '0011' = 3
        #W-N - '1001' = 9
        
        #3-ways
        #N-E-S - '1110' = 14
        #E-S-W - '0111' = 7
        #S-W-N - '1011' = 11
        #W-N-E - '1101' = 13

        #4-way
        #N-E-S-W - '1111' = 15

        #This is likely determined by the code system - for now it's random - likely need a method to update the image using switch statements later on
        validCodes = [3, 3, 3, 5, 5, 5, 6, 7, 9, 10, 10, 11, 12, 12, 13, 14, 15]
        self.ways = sample(validCodes, 1)

        #Use these lines to process the files, once they're converted to a proper format
        self.image = tileType(self.ways[0])
        self.image = pygame.transform.scale(self.image, (GRIDWID - 2, GRIDHEI - 2))

        pygame.draw.rect(self.image, RED, [xcord, ycord, GRIDWID - 2, GRIDHEI - 2])
        self.rect = self.image.get_rect()
        self.rect.x = xcord
        self.rect.y = ycord

#Class for the tiles the roads are placed on
class Square(pygame.sprite.Sprite):
    def __init__(self, row, col):
        super().__init__()
        self.occupied = False
        self.blocked = False
        self.row = row
        self.column = column
        self.toptile = None

        if row == 0 and col == 0:
            self.image = pygame.image.load("begin.jpg")
            self.image = pygame.transform.scale(self.image, (GRIDWID - 2, GRIDHEI - 2))
            self.blocked = True
        elif row == gridlength - 1 and col == gridlength - 1:
            self.image = pygame.image.load("end.jpg")
            self.image = pygame.transform.scale(self.image, (GRIDWID - 2, GRIDHEI - 2))
            self.blocked = True
        else:
            self.image = pygame.Surface([GRIDWID, GRIDHEI])
            self.image.fill(BLUE)

        pygame.draw.rect(self.image, BLUE, [140 + (GRIDWID * row), 70 + (GRIDHEI * col), GRIDWID, GRIDHEI])
        self.rect = self.image.get_rect()
        self.rect.x = 140 + (GRIDWID * row)
        self.rect.y = 70 + (GRIDHEI * col)
        
#Determines the image of the tile used, based on the code system detailed in the Tile class
def tileType(code):    
    return {
        3: pygame.transform.rotate(pygame.image.load("left_turn_tile.jpg"), 270),
        5: pygame.image.load("straight_tiles.jpg"),
        6: pygame.image.load("left_turn_tile.jpg"),
        7: pygame.image.load("t_intersection_tile.jpg"),
        9: pygame.transform.rotate(pygame.image.load("left_turn_tile.jpg"), 180),
        10: pygame.transform.rotate(pygame.image.load("straight_tiles.jpg"), 90),
        11: pygame.transform.rotate(pygame.image.load("t_intersection_tile.jpg"), 270),
        12: pygame.transform.rotate(pygame.image.load("left_turn_tile.jpg"), 90),
        13: pygame.transform.rotate(pygame.image.load("t_intersection_tile.jpg"), 180),
        14: pygame.transform.rotate(pygame.image.load("t_intersection_tile.jpg"), 90),
        15: pygame.image.load("intersection_tiles.jpg"),
    }[code]

#MO for path finding:
#Mark the tile as visited - we don't want to backtrack - Done
#Given a tile, see if it can go north, east, south, or west - Done
#If it can go that way (And doesn't go off the edge), attempt to get the tile in question
#Check the tile first - is it properly connected to the previous tile (Can go south, west, north, east, respectively)? Has it already been visited?
#If it passes all tests, run pathFinder using this new tile and its coordinates on the grid
#If we are able to reach the goal grid, return True to signal success
#If the path cannot go any further, return False to signal failure - Done

def pathFinder(tile, row, column):
    tile.visited = True
    #print("At (" + str(row) + ", " + str(column) + ")")

    #Can go east?
    if tile.ways[0] & 0b0100 != 0 and row + 1 < gridlength:
        #Testing if the goal is south of the current tile
        if row + 1 == gridlength - 1 and column == gridlength - 1:
            #print("Goal!")
            return True
        #Going through the grid
        for scan in playgrid:
            #Ensuring that it's the right spot - right position, occupied but not blocked
            if scan.row == row + 1 and scan.column == column and scan.occupied and (not scan.blocked):
                #Finding the tile on top of the grid
                for nexttile in pygame.sprite.spritecollide(scan, tiles, False):
                    #Finally, insuring that the tile we found connects back to the original tile
                    if nexttile.ways[0] & 0b0001 != 0 and not (nexttile.visited):
                        #print("Going to (" + str(row + 1) + ", " + str(column) + ")")
                        return pathFinder(nexttile, row + 1, column)
                        
    #Can go south?
    if tile.ways[0] & 0b0010 != 0 and column + 1 < gridlength:
        #Testing if the goal is east of the current tile
        if row == gridlength - 1 and column + 1 == gridlength - 1:
            #print("Goal!")
            return True
        #Going through the grid
        for scan in playgrid:
            #Ensuring that it's the right spot - right position, occupied but not blocked
            if scan.row == row and scan.column == column + 1 and scan.occupied and (not scan.blocked):
                #Finding the tile on top of the grid
                for nexttile in pygame.sprite.spritecollide(scan, tiles, False):
                    #Finally, insuring that the tile we found connects back to the original tile
                    if nexttile.ways[0] & 0b1000 != 0 and not (nexttile.visited):
                        #print("Going to (" + str(row) + ", " + str(column + 1) + ")")
                        return pathFinder(nexttile, row, column + 1)
    
    #Can go north?
    if tile.ways[0] & 0b1000 != 0 and column - 1 >= 0:
        #Going through the grid
        for scan in playgrid:
            #Ensuring that it's the right spot - right position, occupied but not blocked
            if scan.row == row and scan.column == column - 1 and scan.occupied and (not scan.blocked):
                #Finding the tile on top of the grid
                for nexttile in pygame.sprite.spritecollide(scan, tiles, False):
                    #Finally, insuring that the tile we found connects back to the original tile
                    if nexttile.ways[0] & 0b0010 != 0 and not (nexttile.visited):
                        #print("Going to (" + str(row) + ", " + str(column - 1) + ")")
                        return pathFinder(nexttile, row, column - 1)
                        
    #Can go west?
    if tile.ways[0] & 0b0001 != 0 and row - 1 >= 0:
        #Going through the grid
        for scan in playgrid:
            #Ensuring that it's the right spot - right position, occupied but not blocked
            if scan.row == row - 1 and scan.column == column and scan.occupied and (not scan.blocked):
                #Finding the tile on top of the grid
                for nexttile in pygame.sprite.spritecollide(scan, tiles, False):
                    #Finally, insuring that the tile we found connects back to the original tile
                    if nexttile.ways[0] & 0b0100 != 0 and not (nexttile.visited):
                        #print("Going to (" + str(row - 1) + ", " + str(column) + ")")
                        return pathFinder(nexttile, row - 1, column)
                        
    return False



#Creating our grid - This can be re-done in the loop later on if truely desired
playgrid = pygame.sprite.Group()
for row in range(gridlength):
    for column in range(gridlength):
        playgrid.add(Square(row, column))

#Creating a group for the tiles, and some tiles (Placeholders for now)
tiles = pygame.sprite.Group()
for y in range(8):
    tiles.add(Tile(390, 20 + (35 * y)))
for z in range(8):
    tiles.add(Tile(435, 20 + (35 * z)))

mountaineer = pygame.transform.scale(pygame.image.load("mountaineer_6.png"), (180, 240)).convert_alpha()

#Global that determines the tile that's being dragged
global selected
selected = None

global backing
backing = BLUE

#Game loop
while True:
    #Drawing the generic play area

    DISPLAYSURF.fill(BLUE)

    pygame.draw.rect(DISPLAYSURF, GOLD, [380, 0, 380, 320])
    pygame.draw.line(DISPLAYSURF, WHITE, [380, 0], [380, 320], 2)

    #Event triggers, including exiting and handling tiles snapping into place
    for event in pygame.event.get():
        #Quit the program
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        #Starting to drag an object
        if event.type == pygame.MOUSEBUTTONDOWN:
            held = True
        #Ceasing to drag an object
        if event.type == pygame.MOUSEBUTTONUP:
            held = False
            #Snap-to, based off the centers of the tiles
            if selected is not None:
                for spot in playgrid:
                    #Checking that the tile and the appropriate grid tile are on top of one another, and that the grid spot is not occupied by another tile or an obstacle
                    if selected.rect.collidepoint(spot.rect.x + (GRIDWID / 2), spot.rect.y + (GRIDHEI / 2)) and (not spot.occupied) and (not spot.blocked):
                        selected.rect.x = spot.rect.x + 2
                        selected.rect.y = spot.rect.y + 2
                        spot.occupied = True
                        spot.toptile = selected


                    #When a piece is secured, there's a check to see whether or not a complete path is made
                    #This is tested at both potential starting points: (0, 1) and (1, 0)
                    if spot.row == 1 and spot.column == 0 and spot.occupied and spot.toptile.ways[0] & 0b0001 != 0:
                        completion = pathFinder(spot.toptile, 1, 0)
                    elif spot.row == 0 and spot.column == 1 and spot.occupied and spot.toptile.ways[0] & 0b1000 != 0:
                        completion = pathFinder(spot.toptile, 0, 1)

                    #Resetting the tiles visited after a sweep                        
                    for visits in tiles:
                        visits.visited = False

                    #Reconfiguring the board in response to completing the level
                    if completion:
                        level = level + 1

                        if level == 2:
                            mountaineer = pygame.transform.scale(pygame.image.load("mountaineer_5.png"), (180, 240)).convert_alpha()
                        elif level == 3:
                            mountaineer = pygame.transform.scale(pygame.image.load("mountaineer_4.png"), (180, 240)).convert_alpha()
                        elif level == 4:
                            mountaineer = pygame.transform.scale(pygame.image.load("mountaineer_3.png"), (180, 240)).convert_alpha()
                        elif level == 5:
                            mountaineer = pygame.transform.scale(pygame.image.load("mountaineer_2.png"), (180, 240)).convert_alpha()
                        elif level > 5:
                            mountaineer = pygame.transform.scale(pygame.image.load("mountaineer_FINAL.png"), (180, 240)).convert_alpha()
                            
                        #message = font.render("Path found!", True, WHITE)
                        #DISPLAYSURF.blit(message, (30, 150))
                        tiles.empty()

                        blocks = 0
                        blocklimit = level / 2
    
                        #Reconfiguring the board tiles are placed on
                        for spot in playgrid:
                            spot.toptile = None
    
                            #Start tile
                            if spot.row == 0 and spot.column == 0:
                                spot.image = pygame.image.load("begin.jpg")
                                spot.image = pygame.transform.scale(spot.image, (GRIDWID - 1, GRIDHEI - 1))
                                spot.blocked = True
                            #Goal tile
                            elif spot.row == gridlength - 1 and spot.column == gridlength - 1:
                                spot.image = pygame.image.load("end.jpg")
                                spot.image = pygame.transform.scale(spot.image, (GRIDWID - 1, GRIDHEI - 1))
                                spot.blocked = True
                            #Placing blocks (Rest of play area, currently spawns 2 blocks
                            elif randint(0, 10) >= 8 and blocks < blocklimit and ((spot.row != 0 and spot.column != 1) or (spot.row != 1 and spot.column != 0) or (spot.row != gridlength - 2 and spot.column != gridlength - 1) or (spot.row != gridlength - 1 and spot.column != gridlength - 2)):
                                spot.image = pygame.image.load("rock.jpg")
                                spot.image = pygame.transform.scale(spot.image, (GRIDWID - 1, GRIDHEI - 1))
                                spot.blocked = True
                                blocks = blocks + 1
                            #Remaining spots for typical play
                            else:
                                spot.image = pygame.Surface([GRIDWID, GRIDHEI])
                                spot.image.fill(BLUE)
                                spot.occupied = False
                                spot.blocked = False

                        for y in range(8):
                            tiles.add(Tile(390, 20 + (35 * y)))
                        for z in range(8):
                            tiles.add(Tile(435, 20 + (35 * z)))
                        completion = False

            #With the mouse button released, selected is freed up for future dragging
                selected = None
                
    #Allows the selected tile to continue to move
    if held:
        (clickx, clicky) = pygame.mouse.get_pos()
        #Ensures that only one tile is ever moved around at once - This establishes selected
        if selected is None:
            for piece in tiles:
                #Ensuring that the tile the player is hovering over is selected
                if piece.rect.collidepoint(clickx, clicky):
                    selected = piece
                    piece.rect.x = clickx - offset
                    piece.rect.y = clicky - offset
                    for spot in playgrid:
                        #Frees up the occupied tile that the block was on top of
                        if selected.rect.collidepoint(spot.rect.x + (GRIDWID / 2), spot.rect.y + (GRIDHEI / 2)):
                            spot.occupied = False
                            spot.toptile = None
                    break
        else:
        #If selected was found earlier, we skip the process and just move the selected tile
            if selected.rect.collidepoint(clickx, clicky):
                selected.rect.x = clickx - offset
                selected.rect.y = clicky - offset

    DISPLAYSURF.blit(mountaineer, (0, 40))

    message = font.render("Stage " + str(area) + "-" + str(level), True, WHITE)
    DISPLAYSURF.blit(message, (310, 10))
    #Drawing all of the grid stuff
    playgrid.draw(DISPLAYSURF)

    for row in range(5):
        for column in range(5): 
            pygame.draw.rect(DISPLAYSURF, WHITE, [140 + (GRIDWID * row), 70 + (GRIDHEI * column), GRIDWID, GRIDHEI], 2)

    #Drawing the tiles (Important, as they need to be on top of the grid)
    tiles.draw(DISPLAYSURF)
    
    pygame.display.update()
    clock.tick(FPS)
